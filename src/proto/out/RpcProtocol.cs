// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Protocol {

  /// <summary>Holder for reflection information generated from RpcProtocol.proto</summary>
  public static partial class RpcProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for RpcProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFScGNQcm90b2NvbC5wcm90bxIOUHJvdG8uUHJvdG9jb2wijwEKBkhlYWRl",
            "chIoCgR0eXBlGAEgASgOMhouUHJvdG8uUHJvdG9jb2wuUGFja2V0VHlwZRIS",
            "CgptZXRob2ROYW1lGAIgASgJEgsKA3VpZBgEIAEoEhILCgNwaWQYBSABKBIS",
            "DAoEY29kZRgGIAEoERINCgVycGNJZBgHIAEoDRIQCghwYWNrZXRJZBgIIAEo",
            "DSptCgpQYWNrZXRUeXBlEggKBE5PTkUQABILCgdSRVFVRVNUEAESDAoIUkVT",
            "UE9OU0UQAhIKCgZDQU5DRUwQAxIJCgVMT0dJThAEEgoKBkxPR09VVBAFEgsK",
            "B0NPTU1BTkQQBhIKCgZTRVJWRVIQBypSChBCYXR0bGVQYWNrZXRUeXBlEgwK",
            "CFBPU0lUSU9OEAASBwoDSElUEAESCAoESEVBTBACEg0KCUpPSU5fR0FNRRAD",
            "Eg4KCkxFQVZFX0dBTUUQBEIXChNjb20ucGVhcmwuc3JzLnByb3RvSANiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Protocol.PacketType), typeof(global::Proto.Protocol.BattlePacketType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Protocol.Header), global::Proto.Protocol.Header.Parser, new[]{ "Type", "MethodName", "Uid", "Pid", "Code", "RpcId", "PacketId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PacketType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("REQUEST")] Request = 1,
    [pbr::OriginalName("RESPONSE")] Response = 2,
    [pbr::OriginalName("CANCEL")] Cancel = 3,
    [pbr::OriginalName("LOGIN")] Login = 4,
    [pbr::OriginalName("LOGOUT")] Logout = 5,
    [pbr::OriginalName("COMMAND")] Command = 6,
    [pbr::OriginalName("SERVER")] Server = 7,
  }

  public enum BattlePacketType {
    [pbr::OriginalName("POSITION")] Position = 0,
    [pbr::OriginalName("HIT")] Hit = 1,
    [pbr::OriginalName("HEAL")] Heal = 2,
    [pbr::OriginalName("JOIN_GAME")] JoinGame = 3,
    [pbr::OriginalName("LEAVE_GAME")] LeaveGame = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Protocol.RpcProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      type_ = other.type_;
      methodName_ = other.methodName_;
      uid_ = other.uid_;
      pid_ = other.pid_;
      code_ = other.code_;
      rpcId_ = other.rpcId_;
      packetId_ = other.packetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.Protocol.PacketType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Protocol.PacketType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "methodName" field.</summary>
    public const int MethodNameFieldNumber = 2;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private long uid_;
    /// <summary>
    /// 	string token = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 5;
    private long pid_;
    /// <summary>
    ///  角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 6;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "rpcId" field.</summary>
    public const int RpcIdFieldNumber = 7;
    private uint rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "packetId" field.</summary>
    public const int PacketIdFieldNumber = 8;
    private uint packetId_;
    /// <summary>
    ///  请求包 ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PacketId {
      get { return packetId_; }
      set {
        packetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MethodName != other.MethodName) return false;
      if (Uid != other.Uid) return false;
      if (Pid != other.Pid) return false;
      if (Code != other.Code) return false;
      if (RpcId != other.RpcId) return false;
      if (PacketId != other.PacketId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Pid != 0L) hash ^= Pid.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (PacketId != 0) hash ^= PacketId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (Uid != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Uid);
      }
      if (Pid != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(Pid);
      }
      if (Code != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Code);
      }
      if (RpcId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RpcId);
      }
      if (PacketId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PacketId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Uid);
      }
      if (Pid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Pid);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Code);
      }
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RpcId);
      }
      if (PacketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PacketId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Pid != 0L) {
        Pid = other.Pid;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.PacketId != 0) {
        PacketId = other.PacketId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto.Protocol.PacketType) input.ReadEnum();
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
          case 32: {
            Uid = input.ReadSInt64();
            break;
          }
          case 40: {
            Pid = input.ReadSInt64();
            break;
          }
          case 48: {
            Code = input.ReadSInt32();
            break;
          }
          case 56: {
            RpcId = input.ReadUInt32();
            break;
          }
          case 64: {
            PacketId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
