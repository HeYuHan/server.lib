// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Message {

  /// <summary>Holder for reflection information generated from ClientData.proto</summary>
  public static partial class ClientDataReflection {

    #region Descriptor
    /// <summary>File descriptor for ClientData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDbGllbnREYXRhLnByb3RvEg1Qcm90by5NZXNzYWdlImUKEFVzZXJMb2dp",
            "blJlcXVlc3QSEAoIdXNlck5hbWUYASABKAkSDwoHdXNlclB3ZBgCIAEoCRIP",
            "CgdzZGtfdWlkGAMgASgJEhEKCXNka190b2tlbhgEIAEoCRIKCgJpcBgFIAEo",
            "CSKUAQoRVXNlckxvZ2luUmVzcG9uc2USCgoCaWQYASABKBISEAoIdXNlck5h",
            "bWUYAiABKAkSKwoHcGxheWVycxgDIAMoCzIaLlByb3RvLk1lc3NhZ2UuUHJv",
            "dG9QbGF5ZXISDgoGc2RrVWlkGAQgASgJEhAKCHNka1Rva2VuGAUgASgJEhIK",
            "CmlzQWN0aXZhdGUYBiABKAgiQQoTVXNlckFjdGl2YXRlUmVxdWVzdBIKCgJp",
            "ZBgBIAEoEhIQCgh1c2VyTmFtZRgCIAEoCRIMCgRjb2RlGAMgASgJImEKFFVz",
            "ZXJBY3RpdmF0ZVJlc3BvbnNlEgoKAmlkGAEgASgSEhAKCHVzZXJOYW1lGAIg",
            "ASgJEisKB3BsYXllcnMYAyADKAsyGi5Qcm90by5NZXNzYWdlLlByb3RvUGxh",
            "eWVyIlkKElBsYXllckxvZ2luUmVxdWVzdBIKCgJpZBgBIAEoEhIVCg1jbGll",
            "bnRWZXJzaW9uGAIgASgJEhAKCGFwcFN0b3JlGAMgASgJEg4KBmRldmljZRgE",
            "IAEoCSJJChNQbGF5ZXJMb2dpblJlc3BvbnNlEjIKCnBsYXllckluZm8YASAB",
            "KAsyHi5Qcm90by5NZXNzYWdlLlByb3RvUGxheWVySW5mbyIhChNQbGF5ZXJM",
            "b2dvdXRSZXF1ZXN0EgoKAmlkGAEgASgSIhYKFFBsYXllckxvZ291dFJlc3Bv",
            "bnNlIpQBChNQbGF5ZXJDcmVhdGVSZXF1ZXN0Eg4KBnVzZXJJZBgBIAEoEhIM",
            "CgRuYW1lGAMgASgJEhYKDnN5c0NoYXJhY3RlcklkGAQgASgNEg4KBnpvbmVJ",
            "ZBgFIAEoBRIVCg1jbGllbnRWZXJzaW9uGAYgASgJEhAKCGFwcFN0b3JlGAcg",
            "ASgJEg4KBmRldmljZRgIIAEoCSJKChRQbGF5ZXJDcmVhdGVSZXNwb25zZRIy",
            "CgpwbGF5ZXJJbmZvGAEgASgLMh4uUHJvdG8uTWVzc2FnZS5Qcm90b1BsYXll",
            "ckluZm8ifwoLUHJvdG9QbGF5ZXISCgoCaWQYASABKBISDAoEbmFtZRgCIAEo",
            "CRIQCghpc0Jhbm5lZBgDIAEoCBIXCg9iYW5uZWRTdGFydFRpbWUYBCABKAkS",
            "FQoNYmFubmVkRW5kVGltZRgFIAEoCRIUCgxiYW5uZWRSZWFzb24YBiABKAki",
            "QQoRUHJvdG9QbGF5ZXJHYXJhZ2USCgoCaWQYASABKBISDAoEbmFtZRgCIAEo",
            "CRISCgpnYXJhZ2VJbmZvGAMgASgJIqIBCg9Qcm90b1BsYXllckl0ZW0SCgoC",
            "aWQYASABKBISEQoJc3lzSXRlbUlkGAIgASgNEhAKCGl0ZW1UeXBlGAMgASgN",
            "Eg0KBWNvdW50GAQgASgNEg0KBWxldmVsGAUgASgNEgwKBHJhbmsYBiABKA0S",
            "EgoKaXNFcXVpcHBlZBgHIAEoCBILCgNleHAYCCABKA0SEQoJaXNEZWZhdWx0",
            "GAogASgIItwGCg9Qcm90b1BsYXllckluZm8SCgoCaWQYASABKBISDAoEbmFt",
            "ZRgCIAEoCRIQCgh1c2VyTmFtZRgDIAEoCRIMCgRnb2xkGAQgASgNEg8KB2Rp",
            "YW1vbmQYBSABKA0SDQoFcG9pbnQYBiABKA0SDQoFcG93ZXIYCCABKA0SCwoD",
            "ZXhwGAkgASgNEg0KBWxldmVsGAogASgNEg4KBmF2YXRhchgMIAEoCRIUCgxu",
            "ZXh0TGV2ZWxFeHAYDSABKA0SEgoKc2tpbGxQb2ludBgOIAEoDRIzCgtwbGF5",
            "ZXJJdGVtcxgPIAMoCzIeLlByb3RvLk1lc3NhZ2UuUHJvdG9QbGF5ZXJJdGVt",
            "EjcKDXBsYXllckdhcmFnZXMYECADKAsyIC5Qcm90by5NZXNzYWdlLlByb3Rv",
            "UGxheWVyR2FyYWdlEhYKDnN5c0NoYXJhY3RlcklkGBEgASgNEhUKDWxhc3RM",
            "b2dpblRpbWUYGiABKAkSDAoEZmxhZxgfIAEoDRISCgpiYXR0bGVGaXJlGCAg",
            "ASgCEhYKDm5ld2JpZVByb2dyZXNzGCUgASgNEhMKC2hhdmVOZXdNYWlsGCcg",
            "ASgIEhIKCnF1ZXN0U2NvcmUYKCABKA0SEwoLbmV4dFB2cFRpbWUYKSABKAkS",
            "EwoLbGFzdFB2cFRpbWUYKiABKAkSEwoLcmV2aXZlQ291bnQYKyABKA0SFAoM",
            "YWN0aXZhdGVUaW1lGC0gASgJEhYKDmFybW9yU3VpdExldmVsGDEgASgNEg8K",
            "B3N0YW1pbmEYMiABKA0SEAoIdmlwTGV2ZWwYNCABKA0SFwoPYnV5U3RhbWlu",
            "YUNvdW50GDYgASgNEhQKDGJ1eUdvbGRDb3VudBg3IAEoDRIYChByZWZyZXNo",
            "U2hvcENvdW50GDggASgNEhUKDWJ1eVRyaWFsQ291bnQYOSABKA0SFQoNYnV5",
            "UG93ZXJDb3VudBg6IAEoDRISCgplbGl0ZUNvdW50GDsgASgNEi8KC2FjY291",
            "bnRUeXBlGDwgASgOMhouUHJvdG8uTWVzc2FnZS5BY2NvdW50VHlwZRISCgpz",
            "dGFtaW5hSWRzGD8gASgJEhQKDHN0b3JhZ2VTbG90cxhBIAEoDRIUCgxzZXJ2",
            "ZXJab25lSWQYZCABKAkqxw0KDFJlc3BvbnNlQ29kZRILCgdTVUNDRVNTEAAS",
            "FAoHVU5LTk9XThD///////////8BEh0KEElOVkFMSURfUFJPVE9DT0wQ/v//",
            "////////ARIYCgtJTlZBTElEX0FSRxD9//////////8BEhQKB1RJTUVPVVQQ",
            "/P//////////ARIYCgtTRVJWRVJfQlVTWRD7//////////8BEhkKDFNFUlZF",
            "Ul9FUlJPUhD6//////////8BEhoKDU1JU1NJTkdfTE9HSU4Q+f//////////",
            "ARIbCg5SRVBFQVRFRF9MT0dJThD4//////////8BEhwKD0RBVEFfUkVBRF9F",
            "UlJPUhD3//////////8BEhcKCkRJU0NPTk5FQ1QQ9v//////////ARIbChdD",
            "T01NT05fSUxMRUdBTF9BUkdVTUVOVBBkEiAKHENPTU1PTl9VTlNVUFBPUlRF",
            "RF9JVEVNX1RZUEUQZRIWChJDT01NT05fSVNfQ0hFQVRJTkcQZhIZChVDT01N",
            "T05fRkFJTF9PUEVSQVRJT04QZxIUChBDT01NT05fTUFYX0xFVkVMEGgSEQoM",
            "U1RPUkFHRV9GVUxMEJYBEhMKDklURU1fTk9UX0VYSVNUEJcBEhQKD0lURU1f",
            "Tk9UX0VOT1VHSBCYARIYChNJVEVNX0NPTVBPVU5EX0VSUk9SEJkBEhQKD0lU",
            "RU1fU0VMTF9FUlJPUhCaARIPCgpJVEVNX0VYSVNUEJsBEhQKD0lURU1fVFlQ",
            "RV9FUlJPUhCcARIUCg9JVEVNX0xFVkVMX0ZVTEwQnQESGQoUSVRFTV9TVEFS",
            "X05PVF9FTk9VR0gQngESFQoQSVRFTV9MRVZFTF9FUlJPUhCfARIUCg9JVEVN",
            "X1JBTktfRVJST1IQoAESEwoOSVRFTV9SQU5LX0ZVTEwQoQESGQoUU1RPUkFH",
            "RV9ERUZBVUxUX0lURU0QogESGgoVU1RPUkFHRV9FUVVJUFBFRF9JVEVNEKMB",
            "EhsKFklURU1fTU9QX1VQX05PVF9FTk9VR0gQpAESHQoYU1RPUkFHRV9FWFBB",
            "TkRfQ09VTlRfTUFYEKUBEhMKDlVTRVJfTk9UX0VYSVNUEMgBEhUKEFBMQVlF",
            "Ul9OT1RfRVhJU1QQyQESJwoiUExBWUVSX05BTUVfV0lUSF9JTExFR0FMX0NI",
            "QVJBQ1RFUhDKARIWChFQTEFZRVJfTkFNRV9FWElTVBDLARIWChFQTEFZRVJf",
            "TkFNRV9FTVBUWRDMARIcChdQTEFZRVJfRU5FR1lfTk9UX0VOT1VHSBDNARIo",
            "CiNQTEFZRVJfUkVTRVRfRU5FR1lfQ09VTlRfTk9UX0VOT1VHSBDOARIcChdQ",
            "TEFZRVJfVklQX0xFVkVMX1NDQU5UWRDQARIUCg9VU0VSX05BTUVfRU1QVFkQ",
            "0QESGgoVUExBWUVSX0VYQ0VFRF9NQVhfTlVNENIBEhgKE1BMQVlFUl9OQU1F",
            "X01JTl9OVU0Q0wESGAoTUExBWUVSX05BTUVfVE9fTE9ORxDUARISCg1QTEFZ",
            "RVJfQkFOTkVEENUBEhwKF1BMQVlFUl9MRVZFTF9OT1RfRU5PVUdIENYBEhUK",
            "EFBMQVlFUl9JU19PTkxJTkUQ1wESGgoVUExBWUVSX0lOX09USEVSX0dVSUxE",
            "ENgBEh4KGVBMQVlFUl9TVEFNSU5BX05PVF9FTk9VR0gQ2QESHwoaUExBWUVS",
            "X1NUQU1JTkFfQ0FOX05PVF9CVVkQ2wESHQoYQ1VSUkVOQ1lfR09MRF9OT1Rf",
            "RU5PVUdIEPoBEh8KGkNVUlJFTkNZX0RJTU9ORF9OT1RfRU5PVUdIEPsBEhMK",
            "DkNVUlJFTkNZX0ZBSUxEEP8BEhYKEUNVUlJFTkNZX09WRVJGTE9XEIACEhkK",
            "FENVUlJFTkNZX1VOU1VQUE9SVEVEEIQCEhgKE0NIRUNLSU5fVE9EQVlfRVhJ",
            "U1QQigUSGAoTUVVFU1RfTk9UX0NPTVBMRVRFRBC8BRISCg1RVUVTVF9FWFBJ",
            "UkVEEL0FEhAKC0ZSSUVORF9GVUxMENIGEhcKEkZSSUVORF9BUFBMWV9FWElT",
            "VBDTBhIRCgxGUklFTkRfRVhJU1QQ1AYSFwoSRlJJRU5EX0FQUExZX0VSUk9S",
            "ENUGEhAKC0dJRlRfRVhQSVJFEIQHEg8KCkdJRlRfRVhJU1QQhQcSHQoYR0lG",
            "VF9SRUNIQVJHRV9OT1RfRU5PVUdIEIYHEiQKH0lOU1RBTkNFX1NUUkFURUdZ",
            "X1VTRV9DT1VOVF9NQVgQzAgSFwoSQkFUVExFX01BVENIX0VYSVNUELAJKjEK",
            "C0FjY291bnRUeXBlEggKBE5PTkUQABIHCgNOT1IQARIHCgNERVYQAhIGCgJH",
            "TRADQhcKE2NvbS5wZWFybC5zcnMucHJvdG9IA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Message.ResponseCode), typeof(global::Proto.Message.AccountType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.UserLoginRequest), global::Proto.Message.UserLoginRequest.Parser, new[]{ "UserName", "UserPwd", "SdkUid", "SdkToken", "Ip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.UserLoginResponse), global::Proto.Message.UserLoginResponse.Parser, new[]{ "Id", "UserName", "Players", "SdkUid", "SdkToken", "IsActivate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.UserActivateRequest), global::Proto.Message.UserActivateRequest.Parser, new[]{ "Id", "UserName", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.UserActivateResponse), global::Proto.Message.UserActivateResponse.Parser, new[]{ "Id", "UserName", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.PlayerLoginRequest), global::Proto.Message.PlayerLoginRequest.Parser, new[]{ "Id", "ClientVersion", "AppStore", "Device" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.PlayerLoginResponse), global::Proto.Message.PlayerLoginResponse.Parser, new[]{ "PlayerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.PlayerLogoutRequest), global::Proto.Message.PlayerLogoutRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.PlayerLogoutResponse), global::Proto.Message.PlayerLogoutResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.PlayerCreateRequest), global::Proto.Message.PlayerCreateRequest.Parser, new[]{ "UserId", "Name", "SysCharacterId", "ZoneId", "ClientVersion", "AppStore", "Device" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.PlayerCreateResponse), global::Proto.Message.PlayerCreateResponse.Parser, new[]{ "PlayerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.ProtoPlayer), global::Proto.Message.ProtoPlayer.Parser, new[]{ "Id", "Name", "IsBanned", "BannedStartTime", "BannedEndTime", "BannedReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.ProtoPlayerGarage), global::Proto.Message.ProtoPlayerGarage.Parser, new[]{ "Id", "Name", "GarageInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.ProtoPlayerItem), global::Proto.Message.ProtoPlayerItem.Parser, new[]{ "Id", "SysItemId", "ItemType", "Count", "Level", "Rank", "IsEquipped", "Exp", "IsDefault" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Message.ProtoPlayerInfo), global::Proto.Message.ProtoPlayerInfo.Parser, new[]{ "Id", "Name", "UserName", "Gold", "Diamond", "Point", "Power", "Exp", "Level", "Avatar", "NextLevelExp", "SkillPoint", "PlayerItems", "PlayerGarages", "SysCharacterId", "LastLoginTime", "Flag", "BattleFire", "NewbieProgress", "HaveNewMail", "QuestScore", "NextPvpTime", "LastPvpTime", "ReviveCount", "ActivateTime", "ArmorSuitLevel", "Stamina", "VipLevel", "BuyStaminaCount", "BuyGoldCount", "RefreshShopCount", "BuyTrialCount", "BuyPowerCount", "EliteCount", "AccountType", "StaminaIds", "StorageSlots", "ServerZoneId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ResponseCode {
    [pbr::OriginalName("SUCCESS")] Success = 0,
    /// <summary>
    ///  未知错误
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = -1,
    /// <summary>
    ///  协议错误
    /// </summary>
    [pbr::OriginalName("INVALID_PROTOCOL")] InvalidProtocol = -2,
    /// <summary>
    ///  非法参数
    /// </summary>
    [pbr::OriginalName("INVALID_ARG")] InvalidArg = -3,
    /// <summary>
    ///  网络请求超时
    /// </summary>
    [pbr::OriginalName("TIMEOUT")] Timeout = -4,
    /// <summary>
    ///  服务器忙碌
    /// </summary>
    [pbr::OriginalName("SERVER_BUSY")] ServerBusy = -5,
    /// <summary>
    ///  服务器错误
    /// </summary>
    [pbr::OriginalName("SERVER_ERROR")] ServerError = -6,
    /// <summary>
    ///  请登录后再操作
    /// </summary>
    [pbr::OriginalName("MISSING_LOGIN")] MissingLogin = -7,
    /// <summary>
    ///  帐号已在其它设备登录
    /// </summary>
    [pbr::OriginalName("REPEATED_LOGIN")] RepeatedLogin = -8,
    /// <summary>
    ///  数据读取错误
    /// </summary>
    [pbr::OriginalName("DATA_READ_ERROR")] DataReadError = -9,
    /// <summary>
    ///  连接中断，请重新登录
    /// </summary>
    [pbr::OriginalName("DISCONNECT")] Disconnect = -10,
    /// <summary>
    ///  非法参数
    /// </summary>
    [pbr::OriginalName("COMMON_ILLEGAL_ARGUMENT")] CommonIllegalArgument = 100,
    /// <summary>
    ///  不支持的物品类型
    /// </summary>
    [pbr::OriginalName("COMMON_UNSUPPORTED_ITEM_TYPE")] CommonUnsupportedItemType = 101,
    /// <summary>
    ///  验证为作弊
    /// </summary>
    [pbr::OriginalName("COMMON_IS_CHEATING")] CommonIsCheating = 102,
    /// <summary>
    ///  操作失败
    /// </summary>
    [pbr::OriginalName("COMMON_FAIL_OPERATION")] CommonFailOperation = 103,
    /// <summary>
    ///  现在已经达到最高等级，可以通过提升角色升级来升级。
    /// </summary>
    [pbr::OriginalName("COMMON_MAX_LEVEL")] CommonMaxLevel = 104,
    /// <summary>
    ///  背包已满
    /// </summary>
    [pbr::OriginalName("STORAGE_FULL")] StorageFull = 150,
    /// <summary>
    ///  指定物品不存在
    /// </summary>
    [pbr::OriginalName("ITEM_NOT_EXIST")] ItemNotExist = 151,
    /// <summary>
    ///  物品不足
    /// </summary>
    [pbr::OriginalName("ITEM_NOT_ENOUGH")] ItemNotEnough = 152,
    /// <summary>
    ///  不能合成该物品
    /// </summary>
    [pbr::OriginalName("ITEM_COMPOUND_ERROR")] ItemCompoundError = 153,
    /// <summary>
    ///  该物品不能出售
    /// </summary>
    [pbr::OriginalName("ITEM_SELL_ERROR")] ItemSellError = 154,
    /// <summary>
    ///  该物品已经存在
    /// </summary>
    [pbr::OriginalName("ITEM_EXIST")] ItemExist = 155,
    /// <summary>
    ///  物品类型错误
    /// </summary>
    [pbr::OriginalName("ITEM_TYPE_ERROR")] ItemTypeError = 156,
    /// <summary>
    ///  物品已经满级，请升阶后再升级。
    /// </summary>
    [pbr::OriginalName("ITEM_LEVEL_FULL")] ItemLevelFull = 157,
    /// <summary>
    ///  物品星级不足
    /// </summary>
    [pbr::OriginalName("ITEM_STAR_NOT_ENOUGH")] ItemStarNotEnough = 158,
    /// <summary>
    ///  该物品不能升级
    /// </summary>
    [pbr::OriginalName("ITEM_LEVEL_ERROR")] ItemLevelError = 159,
    /// <summary>
    ///  该物品不能升阶
    /// </summary>
    [pbr::OriginalName("ITEM_RANK_ERROR")] ItemRankError = 160,
    /// <summary>
    ///  物品已经满阶。
    /// </summary>
    [pbr::OriginalName("ITEM_RANK_FULL")] ItemRankFull = 161,
    /// <summary>
    ///  默认物品不能被消耗
    /// </summary>
    [pbr::OriginalName("STORAGE_DEFAULT_ITEM")] StorageDefaultItem = 162,
    /// <summary>
    ///  已装备的物品不能被消耗
    /// </summary>
    [pbr::OriginalName("STORAGE_EQUIPPED_ITEM")] StorageEquippedItem = 163,
    /// <summary>
    ///  扫荡券不足
    /// </summary>
    [pbr::OriginalName("ITEM_MOP_UP_NOT_ENOUGH")] ItemMopUpNotEnough = 164,
    /// <summary>
    ///  背包可扩展次数已达到上限
    /// </summary>
    [pbr::OriginalName("STORAGE_EXPAND_COUNT_MAX")] StorageExpandCountMax = 165,
    /// <summary>
    ///  指定用户不存在
    /// </summary>
    [pbr::OriginalName("USER_NOT_EXIST")] UserNotExist = 200,
    /// <summary>
    ///  指定角色不存在
    /// </summary>
    [pbr::OriginalName("PLAYER_NOT_EXIST")] PlayerNotExist = 201,
    /// <summary>
    ///  名称中包含非法字符
    /// </summary>
    [pbr::OriginalName("PLAYER_NAME_WITH_ILLEGAL_CHARACTER")] PlayerNameWithIllegalCharacter = 202,
    /// <summary>
    ///  名称已被使用
    /// </summary>
    [pbr::OriginalName("PLAYER_NAME_EXIST")] PlayerNameExist = 203,
    /// <summary>
    ///  角色名字不能为空
    /// </summary>
    [pbr::OriginalName("PLAYER_NAME_EMPTY")] PlayerNameEmpty = 204,
    /// <summary>
    ///  角色体力不足
    /// </summary>
    [pbr::OriginalName("PLAYER_ENEGY_NOT_ENOUGH")] PlayerEnegyNotEnough = 205,
    /// <summary>
    ///  购买体力的次数已用完
    /// </summary>
    [pbr::OriginalName("PLAYER_RESET_ENEGY_COUNT_NOT_ENOUGH")] PlayerResetEnegyCountNotEnough = 206,
    /// <summary>
    ///  角色VIP等级不足
    /// </summary>
    [pbr::OriginalName("PLAYER_VIP_LEVEL_SCANTY")] PlayerVipLevelScanty = 208,
    /// <summary>
    ///  用户名不能为空
    /// </summary>
    [pbr::OriginalName("USER_NAME_EMPTY")] UserNameEmpty = 209,
    /// <summary>
    ///  已达到角色数量上限
    /// </summary>
    [pbr::OriginalName("PLAYER_EXCEED_MAX_NUM")] PlayerExceedMaxNum = 210,
    /// <summary>
    ///  角色名称最少为3个字符
    /// </summary>
    [pbr::OriginalName("PLAYER_NAME_MIN_NUM")] PlayerNameMinNum = 211,
    /// <summary>
    ///  角色名称最多为9个汉字或18个英文
    /// </summary>
    [pbr::OriginalName("PLAYER_NAME_TO_LONG")] PlayerNameToLong = 212,
    /// <summary>
    ///  角色已经被封停
    /// </summary>
    [pbr::OriginalName("PLAYER_BANNED")] PlayerBanned = 213,
    /// <summary>
    /// 角色等级不足
    /// </summary>
    [pbr::OriginalName("PLAYER_LEVEL_NOT_ENOUGH")] PlayerLevelNotEnough = 214,
    /// <summary>
    /// 角色在线
    /// </summary>
    [pbr::OriginalName("PLAYER_IS_ONLINE")] PlayerIsOnline = 215,
    /// <summary>
    /// 该玩家已加入其它公会
    /// </summary>
    [pbr::OriginalName("PLAYER_IN_OTHER_GUILD")] PlayerInOtherGuild = 216,
    /// <summary>
    /// 玩家体力不足
    /// </summary>
    [pbr::OriginalName("PLAYER_STAMINA_NOT_ENOUGH")] PlayerStaminaNotEnough = 217,
    /// <summary>
    /// 玩家不能购买体力
    /// </summary>
    [pbr::OriginalName("PLAYER_STAMINA_CAN_NOT_BUY")] PlayerStaminaCanNotBuy = 219,
    /// <summary>
    ///  金币数量不足
    /// </summary>
    [pbr::OriginalName("CURRENCY_GOLD_NOT_ENOUGH")] CurrencyGoldNotEnough = 250,
    /// <summary>
    ///  钻石数量不足
    /// </summary>
    [pbr::OriginalName("CURRENCY_DIMOND_NOT_ENOUGH")] CurrencyDimondNotEnough = 251,
    /// <summary>
    ///  交易失败
    /// </summary>
    [pbr::OriginalName("CURRENCY_FAILD")] CurrencyFaild = 255,
    /// <summary>
    ///  Currency overflow
    /// </summary>
    [pbr::OriginalName("CURRENCY_OVERFLOW")] CurrencyOverflow = 256,
    /// <summary>
    ///  不支持的货币类型
    /// </summary>
    [pbr::OriginalName("CURRENCY_UNSUPPORTED")] CurrencyUnsupported = 260,
    /// <summary>
    /// 今日已签到
    /// </summary>
    [pbr::OriginalName("CHECKIN_TODAY_EXIST")] CheckinTodayExist = 650,
    /// <summary>
    ///  当前任务尚未完成
    /// </summary>
    [pbr::OriginalName("QUEST_NOT_COMPLETED")] QuestNotCompleted = 700,
    /// <summary>
    ///  当前任务尚未完成
    /// </summary>
    [pbr::OriginalName("QUEST_EXPIRED")] QuestExpired = 701,
    /// <summary>
    ///  好友数量已经达到上限
    /// </summary>
    [pbr::OriginalName("FRIEND_FULL")] FriendFull = 850,
    /// <summary>
    ///  已向该玩家发送好友申请
    /// </summary>
    [pbr::OriginalName("FRIEND_APPLY_EXIST")] FriendApplyExist = 851,
    /// <summary>
    ///  你们已经是好友了
    /// </summary>
    [pbr::OriginalName("FRIEND_EXIST")] FriendExist = 852,
    /// <summary>
    ///  不能添加自己为好友
    /// </summary>
    [pbr::OriginalName("FRIEND_APPLY_ERROR")] FriendApplyError = 853,
    /// <summary>
    ///  该活动已过期
    /// </summary>
    [pbr::OriginalName("GIFT_EXPIRE")] GiftExpire = 900,
    /// <summary>
    ///  你已经领取过该活动奖励
    /// </summary>
    [pbr::OriginalName("GIFT_EXIST")] GiftExist = 901,
    /// <summary>
    ///  充值金额不足
    /// </summary>
    [pbr::OriginalName("GIFT_RECHARGE_NOT_ENOUGH")] GiftRechargeNotEnough = 902,
    /// <summary>
    /// 策略已用完
    /// </summary>
    [pbr::OriginalName("INSTANCE_STRATEGY_USE_COUNT_MAX")] InstanceStrategyUseCountMax = 1100,
    /// <summary>
    ///  已经在匹配中
    /// </summary>
    [pbr::OriginalName("BATTLE_MATCH_EXIST")] BattleMatchExist = 1200,
  }

  public enum AccountType {
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// 普通玩家
    /// </summary>
    [pbr::OriginalName("NOR")] Nor = 1,
    /// <summary>
    /// 开发者
    /// </summary>
    [pbr::OriginalName("DEV")] Dev = 2,
    /// <summary>
    /// GM
    /// </summary>
    [pbr::OriginalName("GM")] Gm = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  用户登录
  /// </summary>
  public sealed partial class UserLoginRequest : pb::IMessage<UserLoginRequest> {
    private static readonly pb::MessageParser<UserLoginRequest> _parser = new pb::MessageParser<UserLoginRequest>(() => new UserLoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginRequest(UserLoginRequest other) : this() {
      userName_ = other.userName_;
      userPwd_ = other.userPwd_;
      sdkUid_ = other.sdkUid_;
      sdkToken_ = other.sdkToken_;
      ip_ = other.ip_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginRequest Clone() {
      return new UserLoginRequest(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    /// 用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userPwd" field.</summary>
    public const int UserPwdFieldNumber = 2;
    private string userPwd_ = "";
    /// <summary>
    /// 用户密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserPwd {
      get { return userPwd_; }
      set {
        userPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_uid" field.</summary>
    public const int SdkUidFieldNumber = 3;
    private string sdkUid_ = "";
    /// <summary>
    /// 平台账户唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkUid {
      get { return sdkUid_; }
      set {
        sdkUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_token" field.</summary>
    public const int SdkTokenFieldNumber = 4;
    private string sdkToken_ = "";
    /// <summary>
    /// 平台登录令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkToken {
      get { return sdkToken_; }
      set {
        sdkToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    /// <summary>
    ///  登录IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (UserPwd != other.UserPwd) return false;
      if (SdkUid != other.SdkUid) return false;
      if (SdkToken != other.SdkToken) return false;
      if (Ip != other.Ip) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserPwd.Length != 0) hash ^= UserPwd.GetHashCode();
      if (SdkUid.Length != 0) hash ^= SdkUid.GetHashCode();
      if (SdkToken.Length != 0) hash ^= SdkToken.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (UserPwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserPwd);
      }
      if (SdkUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SdkUid);
      }
      if (SdkToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SdkToken);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserPwd);
      }
      if (SdkUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkUid);
      }
      if (SdkToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkToken);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserPwd.Length != 0) {
        UserPwd = other.UserPwd;
      }
      if (other.SdkUid.Length != 0) {
        SdkUid = other.SdkUid;
      }
      if (other.SdkToken.Length != 0) {
        SdkToken = other.SdkToken;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            UserPwd = input.ReadString();
            break;
          }
          case 26: {
            SdkUid = input.ReadString();
            break;
          }
          case 34: {
            SdkToken = input.ReadString();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserLoginResponse : pb::IMessage<UserLoginResponse> {
    private static readonly pb::MessageParser<UserLoginResponse> _parser = new pb::MessageParser<UserLoginResponse>(() => new UserLoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginResponse(UserLoginResponse other) : this() {
      id_ = other.id_;
      userName_ = other.userName_;
      players_ = other.players_.Clone();
      sdkUid_ = other.sdkUid_;
      sdkToken_ = other.sdkToken_;
      isActivate_ = other.isActivate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginResponse Clone() {
      return new UserLoginResponse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  玩家唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///  用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.Message.ProtoPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.Message.ProtoPlayer.Parser);
    private readonly pbc::RepeatedField<global::Proto.Message.ProtoPlayer> players_ = new pbc::RepeatedField<global::Proto.Message.ProtoPlayer>();
    /// <summary>
    ///  角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Message.ProtoPlayer> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "sdkUid" field.</summary>
    public const int SdkUidFieldNumber = 4;
    private string sdkUid_ = "";
    /// <summary>
    ///  平台账户唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkUid {
      get { return sdkUid_; }
      set {
        sdkUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdkToken" field.</summary>
    public const int SdkTokenFieldNumber = 5;
    private string sdkToken_ = "";
    /// <summary>
    ///  平台登录令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkToken {
      get { return sdkToken_; }
      set {
        sdkToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isActivate" field.</summary>
    public const int IsActivateFieldNumber = 6;
    private bool isActivate_;
    /// <summary>
    ///  用户是否激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActivate {
      get { return isActivate_; }
      set {
        isActivate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserName != other.UserName) return false;
      if(!players_.Equals(other.players_)) return false;
      if (SdkUid != other.SdkUid) return false;
      if (SdkToken != other.SdkToken) return false;
      if (IsActivate != other.IsActivate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      hash ^= players_.GetHashCode();
      if (SdkUid.Length != 0) hash ^= SdkUid.GetHashCode();
      if (SdkToken.Length != 0) hash ^= SdkToken.GetHashCode();
      if (IsActivate != false) hash ^= IsActivate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (SdkUid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SdkUid);
      }
      if (SdkToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SdkToken);
      }
      if (IsActivate != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsActivate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (SdkUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkUid);
      }
      if (SdkToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkToken);
      }
      if (IsActivate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      players_.Add(other.players_);
      if (other.SdkUid.Length != 0) {
        SdkUid = other.SdkUid;
      }
      if (other.SdkToken.Length != 0) {
        SdkToken = other.SdkToken;
      }
      if (other.IsActivate != false) {
        IsActivate = other.IsActivate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 34: {
            SdkUid = input.ReadString();
            break;
          }
          case 42: {
            SdkToken = input.ReadString();
            break;
          }
          case 48: {
            IsActivate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  用户激活
  /// </summary>
  public sealed partial class UserActivateRequest : pb::IMessage<UserActivateRequest> {
    private static readonly pb::MessageParser<UserActivateRequest> _parser = new pb::MessageParser<UserActivateRequest>(() => new UserActivateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActivateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivateRequest(UserActivateRequest other) : this() {
      id_ = other.id_;
      userName_ = other.userName_;
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivateRequest Clone() {
      return new UserActivateRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  玩家唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///  用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    /// <summary>
    ///  激活码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActivateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActivateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserName != other.UserName) return false;
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActivateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserActivateResponse : pb::IMessage<UserActivateResponse> {
    private static readonly pb::MessageParser<UserActivateResponse> _parser = new pb::MessageParser<UserActivateResponse>(() => new UserActivateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActivateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivateResponse(UserActivateResponse other) : this() {
      id_ = other.id_;
      userName_ = other.userName_;
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivateResponse Clone() {
      return new UserActivateResponse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  玩家唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///  用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.Message.ProtoPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.Message.ProtoPlayer.Parser);
    private readonly pbc::RepeatedField<global::Proto.Message.ProtoPlayer> players_ = new pbc::RepeatedField<global::Proto.Message.ProtoPlayer>();
    /// <summary>
    ///  角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Message.ProtoPlayer> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActivateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActivateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserName != other.UserName) return false;
      if(!players_.Equals(other.players_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      hash ^= players_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActivateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色登录
  /// </summary>
  public sealed partial class PlayerLoginRequest : pb::IMessage<PlayerLoginRequest> {
    private static readonly pb::MessageParser<PlayerLoginRequest> _parser = new pb::MessageParser<PlayerLoginRequest>(() => new PlayerLoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginRequest(PlayerLoginRequest other) : this() {
      id_ = other.id_;
      clientVersion_ = other.clientVersion_;
      appStore_ = other.appStore_;
      device_ = other.device_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginRequest Clone() {
      return new PlayerLoginRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  角色唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    /// <summary>
    ///  客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appStore" field.</summary>
    public const int AppStoreFieldNumber = 3;
    private string appStore_ = "";
    /// <summary>
    ///  渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppStore {
      get { return appStore_; }
      set {
        appStore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 4;
    private string device_ = "";
    /// <summary>
    ///  登录设备(10901：安卓、10903：ios正版、10905：ios越狱、10906：PC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (AppStore != other.AppStore) return false;
      if (Device != other.Device) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (AppStore.Length != 0) hash ^= AppStore.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (AppStore.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppStore);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Device);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (AppStore.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppStore);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.AppStore.Length != 0) {
        AppStore = other.AppStore;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            AppStore = input.ReadString();
            break;
          }
          case 34: {
            Device = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLoginResponse : pb::IMessage<PlayerLoginResponse> {
    private static readonly pb::MessageParser<PlayerLoginResponse> _parser = new pb::MessageParser<PlayerLoginResponse>(() => new PlayerLoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginResponse(PlayerLoginResponse other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginResponse Clone() {
      return new PlayerLoginResponse(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Proto.Message.ProtoPlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Message.ProtoPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Proto.Message.ProtoPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Proto.Message.ProtoPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色退出
  /// </summary>
  public sealed partial class PlayerLogoutRequest : pb::IMessage<PlayerLogoutRequest> {
    private static readonly pb::MessageParser<PlayerLogoutRequest> _parser = new pb::MessageParser<PlayerLogoutRequest>(() => new PlayerLogoutRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLogoutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLogoutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLogoutRequest(PlayerLogoutRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLogoutRequest Clone() {
      return new PlayerLogoutRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  角色唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLogoutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLogoutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLogoutRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLogoutResponse : pb::IMessage<PlayerLogoutResponse> {
    private static readonly pb::MessageParser<PlayerLogoutResponse> _parser = new pb::MessageParser<PlayerLogoutResponse>(() => new PlayerLogoutResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLogoutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLogoutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLogoutResponse(PlayerLogoutResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLogoutResponse Clone() {
      return new PlayerLogoutResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLogoutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLogoutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLogoutResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  创建角色
  /// </summary>
  public sealed partial class PlayerCreateRequest : pb::IMessage<PlayerCreateRequest> {
    private static readonly pb::MessageParser<PlayerCreateRequest> _parser = new pb::MessageParser<PlayerCreateRequest>(() => new PlayerCreateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRequest(PlayerCreateRequest other) : this() {
      userId_ = other.userId_;
      name_ = other.name_;
      sysCharacterId_ = other.sysCharacterId_;
      zoneId_ = other.zoneId_;
      clientVersion_ = other.clientVersion_;
      appStore_ = other.appStore_;
      device_ = other.device_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRequest Clone() {
      return new PlayerCreateRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///  用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sysCharacterId" field.</summary>
    public const int SysCharacterIdFieldNumber = 4;
    private uint sysCharacterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SysCharacterId {
      get { return sysCharacterId_; }
      set {
        sysCharacterId_ = value;
      }
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 5;
    private int zoneId_;
    /// <summary>
    ///  大区ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 6;
    private string clientVersion_ = "";
    /// <summary>
    ///  客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appStore" field.</summary>
    public const int AppStoreFieldNumber = 7;
    private string appStore_ = "";
    /// <summary>
    ///  渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppStore {
      get { return appStore_; }
      set {
        appStore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 8;
    private string device_ = "";
    /// <summary>
    ///  登录设备(10901：安卓、10903：ios正版、10905：ios越狱、10906：PC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Name != other.Name) return false;
      if (SysCharacterId != other.SysCharacterId) return false;
      if (ZoneId != other.ZoneId) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (AppStore != other.AppStore) return false;
      if (Device != other.Device) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SysCharacterId != 0) hash ^= SysCharacterId.GetHashCode();
      if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (AppStore.Length != 0) hash ^= AppStore.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (SysCharacterId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SysCharacterId);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ZoneId);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClientVersion);
      }
      if (AppStore.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AppStore);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Device);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SysCharacterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SysCharacterId);
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (AppStore.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppStore);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SysCharacterId != 0) {
        SysCharacterId = other.SysCharacterId;
      }
      if (other.ZoneId != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.AppStore.Length != 0) {
        AppStore = other.AppStore;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadSInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            SysCharacterId = input.ReadUInt32();
            break;
          }
          case 40: {
            ZoneId = input.ReadInt32();
            break;
          }
          case 50: {
            ClientVersion = input.ReadString();
            break;
          }
          case 58: {
            AppStore = input.ReadString();
            break;
          }
          case 66: {
            Device = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCreateResponse : pb::IMessage<PlayerCreateResponse> {
    private static readonly pb::MessageParser<PlayerCreateResponse> _parser = new pb::MessageParser<PlayerCreateResponse>(() => new PlayerCreateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCreateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateResponse(PlayerCreateResponse other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateResponse Clone() {
      return new PlayerCreateResponse(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Proto.Message.ProtoPlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Message.ProtoPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCreateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCreateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCreateResponse other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Proto.Message.ProtoPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Proto.Message.ProtoPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoPlayer : pb::IMessage<ProtoPlayer> {
    private static readonly pb::MessageParser<ProtoPlayer> _parser = new pb::MessageParser<ProtoPlayer>(() => new ProtoPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayer(ProtoPlayer other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      isBanned_ = other.isBanned_;
      bannedStartTime_ = other.bannedStartTime_;
      bannedEndTime_ = other.bannedEndTime_;
      bannedReason_ = other.bannedReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayer Clone() {
      return new ProtoPlayer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  角色唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  角色名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isBanned" field.</summary>
    public const int IsBannedFieldNumber = 3;
    private bool isBanned_;
    /// <summary>
    ///  当前是否被封停
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBanned {
      get { return isBanned_; }
      set {
        isBanned_ = value;
      }
    }

    /// <summary>Field number for the "bannedStartTime" field.</summary>
    public const int BannedStartTimeFieldNumber = 4;
    private string bannedStartTime_ = "";
    /// <summary>
    ///  封停开始时间 格式：2010-01-01 00:00:00
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BannedStartTime {
      get { return bannedStartTime_; }
      set {
        bannedStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bannedEndTime" field.</summary>
    public const int BannedEndTimeFieldNumber = 5;
    private string bannedEndTime_ = "";
    /// <summary>
    ///  封停结束时间 格式：2010-01-01 00:00:00
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BannedEndTime {
      get { return bannedEndTime_; }
      set {
        bannedEndTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bannedReason" field.</summary>
    public const int BannedReasonFieldNumber = 6;
    private string bannedReason_ = "";
    /// <summary>
    ///  封停原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BannedReason {
      get { return bannedReason_; }
      set {
        bannedReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (IsBanned != other.IsBanned) return false;
      if (BannedStartTime != other.BannedStartTime) return false;
      if (BannedEndTime != other.BannedEndTime) return false;
      if (BannedReason != other.BannedReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsBanned != false) hash ^= IsBanned.GetHashCode();
      if (BannedStartTime.Length != 0) hash ^= BannedStartTime.GetHashCode();
      if (BannedEndTime.Length != 0) hash ^= BannedEndTime.GetHashCode();
      if (BannedReason.Length != 0) hash ^= BannedReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsBanned != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBanned);
      }
      if (BannedStartTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BannedStartTime);
      }
      if (BannedEndTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BannedEndTime);
      }
      if (BannedReason.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BannedReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsBanned != false) {
        size += 1 + 1;
      }
      if (BannedStartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BannedStartTime);
      }
      if (BannedEndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BannedEndTime);
      }
      if (BannedReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BannedReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsBanned != false) {
        IsBanned = other.IsBanned;
      }
      if (other.BannedStartTime.Length != 0) {
        BannedStartTime = other.BannedStartTime;
      }
      if (other.BannedEndTime.Length != 0) {
        BannedEndTime = other.BannedEndTime;
      }
      if (other.BannedReason.Length != 0) {
        BannedReason = other.BannedReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsBanned = input.ReadBool();
            break;
          }
          case 34: {
            BannedStartTime = input.ReadString();
            break;
          }
          case 42: {
            BannedEndTime = input.ReadString();
            break;
          }
          case 50: {
            BannedReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoPlayerGarage : pb::IMessage<ProtoPlayerGarage> {
    private static readonly pb::MessageParser<ProtoPlayerGarage> _parser = new pb::MessageParser<ProtoPlayerGarage>(() => new ProtoPlayerGarage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayerGarage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerGarage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerGarage(ProtoPlayerGarage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      garageInfo_ = other.garageInfo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerGarage Clone() {
      return new ProtoPlayerGarage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  角色唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  角色名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "garageInfo" field.</summary>
    public const int GarageInfoFieldNumber = 3;
    private string garageInfo_ = "";
    /// <summary>
    /// 角色车库数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GarageInfo {
      get { return garageInfo_; }
      set {
        garageInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayerGarage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayerGarage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (GarageInfo != other.GarageInfo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GarageInfo.Length != 0) hash ^= GarageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (GarageInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GarageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GarageInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GarageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayerGarage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GarageInfo.Length != 0) {
        GarageInfo = other.GarageInfo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            GarageInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoPlayerItem : pb::IMessage<ProtoPlayerItem> {
    private static readonly pb::MessageParser<ProtoPlayerItem> _parser = new pb::MessageParser<ProtoPlayerItem>(() => new ProtoPlayerItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayerItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerItem(ProtoPlayerItem other) : this() {
      id_ = other.id_;
      sysItemId_ = other.sysItemId_;
      itemType_ = other.itemType_;
      count_ = other.count_;
      level_ = other.level_;
      rank_ = other.rank_;
      isEquipped_ = other.isEquipped_;
      exp_ = other.exp_;
      isDefault_ = other.isDefault_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerItem Clone() {
      return new ProtoPlayerItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  角色道具唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "sysItemId" field.</summary>
    public const int SysItemIdFieldNumber = 2;
    private uint sysItemId_;
    /// <summary>
    ///  系统物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SysItemId {
      get { return sysItemId_; }
      set {
        sysItemId_ = value;
      }
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 3;
    private uint itemType_;
    /// <summary>
    ///  系统物品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private uint count_;
    /// <summary>
    ///  数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    /// <summary>
    ///  升级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 6;
    private uint rank_;
    /// <summary>
    ///  升阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "isEquipped" field.</summary>
    public const int IsEquippedFieldNumber = 7;
    private bool isEquipped_;
    /// <summary>
    ///  是否正被装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEquipped {
      get { return isEquipped_; }
      set {
        isEquipped_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 8;
    private uint exp_;
    /// <summary>
    ///  经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "isDefault" field.</summary>
    public const int IsDefaultFieldNumber = 10;
    private bool isDefault_;
    /// <summary>
    ///  角色默认车，不能分解，买卖，消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDefault {
      get { return isDefault_; }
      set {
        isDefault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayerItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayerItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SysItemId != other.SysItemId) return false;
      if (ItemType != other.ItemType) return false;
      if (Count != other.Count) return false;
      if (Level != other.Level) return false;
      if (Rank != other.Rank) return false;
      if (IsEquipped != other.IsEquipped) return false;
      if (Exp != other.Exp) return false;
      if (IsDefault != other.IsDefault) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (SysItemId != 0) hash ^= SysItemId.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (IsEquipped != false) hash ^= IsEquipped.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (IsDefault != false) hash ^= IsDefault.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (SysItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SysItemId);
      }
      if (ItemType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemType);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (Rank != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Rank);
      }
      if (IsEquipped != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsEquipped);
      }
      if (Exp != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Exp);
      }
      if (IsDefault != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsDefault);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (SysItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SysItemId);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (IsEquipped != false) {
        size += 1 + 1;
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (IsDefault != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayerItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.SysItemId != 0) {
        SysItemId = other.SysItemId;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.IsEquipped != false) {
        IsEquipped = other.IsEquipped;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.IsDefault != false) {
        IsDefault = other.IsDefault;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 16: {
            SysItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemType = input.ReadUInt32();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            Rank = input.ReadUInt32();
            break;
          }
          case 56: {
            IsEquipped = input.ReadBool();
            break;
          }
          case 64: {
            Exp = input.ReadUInt32();
            break;
          }
          case 80: {
            IsDefault = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoPlayerInfo : pb::IMessage<ProtoPlayerInfo> {
    private static readonly pb::MessageParser<ProtoPlayerInfo> _parser = new pb::MessageParser<ProtoPlayerInfo>(() => new ProtoPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Message.ClientDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerInfo(ProtoPlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      userName_ = other.userName_;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      point_ = other.point_;
      power_ = other.power_;
      exp_ = other.exp_;
      level_ = other.level_;
      avatar_ = other.avatar_;
      nextLevelExp_ = other.nextLevelExp_;
      skillPoint_ = other.skillPoint_;
      playerItems_ = other.playerItems_.Clone();
      playerGarages_ = other.playerGarages_.Clone();
      sysCharacterId_ = other.sysCharacterId_;
      lastLoginTime_ = other.lastLoginTime_;
      flag_ = other.flag_;
      battleFire_ = other.battleFire_;
      newbieProgress_ = other.newbieProgress_;
      haveNewMail_ = other.haveNewMail_;
      questScore_ = other.questScore_;
      nextPvpTime_ = other.nextPvpTime_;
      lastPvpTime_ = other.lastPvpTime_;
      reviveCount_ = other.reviveCount_;
      activateTime_ = other.activateTime_;
      armorSuitLevel_ = other.armorSuitLevel_;
      stamina_ = other.stamina_;
      vipLevel_ = other.vipLevel_;
      buyStaminaCount_ = other.buyStaminaCount_;
      buyGoldCount_ = other.buyGoldCount_;
      refreshShopCount_ = other.refreshShopCount_;
      buyTrialCount_ = other.buyTrialCount_;
      buyPowerCount_ = other.buyPowerCount_;
      eliteCount_ = other.eliteCount_;
      accountType_ = other.accountType_;
      staminaIds_ = other.staminaIds_;
      storageSlots_ = other.storageSlots_;
      serverZoneId_ = other.serverZoneId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerInfo Clone() {
      return new ProtoPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// 玩家唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  角色名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    /// <summary>
    ///  用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private uint gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 5;
    private uint diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 6;
    private uint point_;
    /// <summary>
    /// 积分赛货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 8;
    private uint power_;
    /// <summary>
    /// 能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 9;
    private uint exp_;
    /// <summary>
    ///  经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 10;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 12;
    private string avatar_ = "";
    /// <summary>
    ///  头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextLevelExp" field.</summary>
    public const int NextLevelExpFieldNumber = 13;
    private uint nextLevelExp_;
    /// <summary>
    ///  玩家升级所需要的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextLevelExp {
      get { return nextLevelExp_; }
      set {
        nextLevelExp_ = value;
      }
    }

    /// <summary>Field number for the "skillPoint" field.</summary>
    public const int SkillPointFieldNumber = 14;
    private uint skillPoint_;
    /// <summary>
    ///  技能点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillPoint {
      get { return skillPoint_; }
      set {
        skillPoint_ = value;
      }
    }

    /// <summary>Field number for the "playerItems" field.</summary>
    public const int PlayerItemsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Proto.Message.ProtoPlayerItem> _repeated_playerItems_codec
        = pb::FieldCodec.ForMessage(122, global::Proto.Message.ProtoPlayerItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.Message.ProtoPlayerItem> playerItems_ = new pbc::RepeatedField<global::Proto.Message.ProtoPlayerItem>();
    /// <summary>
    ///  玩家所有的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Message.ProtoPlayerItem> PlayerItems {
      get { return playerItems_; }
    }

    /// <summary>Field number for the "playerGarages" field.</summary>
    public const int PlayerGaragesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Proto.Message.ProtoPlayerGarage> _repeated_playerGarages_codec
        = pb::FieldCodec.ForMessage(130, global::Proto.Message.ProtoPlayerGarage.Parser);
    private readonly pbc::RepeatedField<global::Proto.Message.ProtoPlayerGarage> playerGarages_ = new pbc::RepeatedField<global::Proto.Message.ProtoPlayerGarage>();
    /// <summary>
    /// 玩家车库信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Message.ProtoPlayerGarage> PlayerGarages {
      get { return playerGarages_; }
    }

    /// <summary>Field number for the "sysCharacterId" field.</summary>
    public const int SysCharacterIdFieldNumber = 17;
    private uint sysCharacterId_;
    /// <summary>
    ///  系统角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SysCharacterId {
      get { return sysCharacterId_; }
      set {
        sysCharacterId_ = value;
      }
    }

    /// <summary>Field number for the "lastLoginTime" field.</summary>
    public const int LastLoginTimeFieldNumber = 26;
    private string lastLoginTime_ = "";
    /// <summary>
    ///  最后登入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastLoginTime {
      get { return lastLoginTime_; }
      set {
        lastLoginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 31;
    private uint flag_;
    /// <summary>
    /// 标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "battleFire" field.</summary>
    public const int BattleFireFieldNumber = 32;
    private float battleFire_;
    /// <summary>
    /// 战斗力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BattleFire {
      get { return battleFire_; }
      set {
        battleFire_ = value;
      }
    }

    /// <summary>Field number for the "newbieProgress" field.</summary>
    public const int NewbieProgressFieldNumber = 37;
    private uint newbieProgress_;
    /// <summary>
    ///  新手引导进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewbieProgress {
      get { return newbieProgress_; }
      set {
        newbieProgress_ = value;
      }
    }

    /// <summary>Field number for the "haveNewMail" field.</summary>
    public const int HaveNewMailFieldNumber = 39;
    private bool haveNewMail_;
    /// <summary>
    ///  是否有新邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HaveNewMail {
      get { return haveNewMail_; }
      set {
        haveNewMail_ = value;
      }
    }

    /// <summary>Field number for the "questScore" field.</summary>
    public const int QuestScoreFieldNumber = 40;
    private uint questScore_;
    /// <summary>
    ///  任务积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuestScore {
      get { return questScore_; }
      set {
        questScore_ = value;
      }
    }

    /// <summary>Field number for the "nextPvpTime" field.</summary>
    public const int NextPvpTimeFieldNumber = 41;
    private string nextPvpTime_ = "";
    /// <summary>
    /// 下次可PVP对战的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPvpTime {
      get { return nextPvpTime_; }
      set {
        nextPvpTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastPvpTime" field.</summary>
    public const int LastPvpTimeFieldNumber = 42;
    private string lastPvpTime_ = "";
    /// <summary>
    /// 上次PVP结算的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastPvpTime {
      get { return lastPvpTime_; }
      set {
        lastPvpTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reviveCount" field.</summary>
    public const int ReviveCountFieldNumber = 43;
    private uint reviveCount_;
    /// <summary>
    /// 当天复活次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReviveCount {
      get { return reviveCount_; }
      set {
        reviveCount_ = value;
      }
    }

    /// <summary>Field number for the "activateTime" field.</summary>
    public const int ActivateTimeFieldNumber = 45;
    private string activateTime_ = "";
    /// <summary>
    ///  激活日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActivateTime {
      get { return activateTime_; }
      set {
        activateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "armorSuitLevel" field.</summary>
    public const int ArmorSuitLevelFieldNumber = 49;
    private uint armorSuitLevel_;
    /// <summary>
    ///  套装效果等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArmorSuitLevel {
      get { return armorSuitLevel_; }
      set {
        armorSuitLevel_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 50;
    private uint stamina_;
    /// <summary>
    ///  体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 52;
    private uint vipLevel_;
    /// <summary>
    /// 玩家VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "buyStaminaCount" field.</summary>
    public const int BuyStaminaCountFieldNumber = 54;
    private uint buyStaminaCount_;
    /// <summary>
    ///  当天已经购买体力次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyStaminaCount {
      get { return buyStaminaCount_; }
      set {
        buyStaminaCount_ = value;
      }
    }

    /// <summary>Field number for the "buyGoldCount" field.</summary>
    public const int BuyGoldCountFieldNumber = 55;
    private uint buyGoldCount_;
    /// <summary>
    ///  当天已经购买金币次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyGoldCount {
      get { return buyGoldCount_; }
      set {
        buyGoldCount_ = value;
      }
    }

    /// <summary>Field number for the "refreshShopCount" field.</summary>
    public const int RefreshShopCountFieldNumber = 56;
    private uint refreshShopCount_;
    /// <summary>
    ///  当天已经刷新商店次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshShopCount {
      get { return refreshShopCount_; }
      set {
        refreshShopCount_ = value;
      }
    }

    /// <summary>Field number for the "buyTrialCount" field.</summary>
    public const int BuyTrialCountFieldNumber = 57;
    private uint buyTrialCount_;
    /// <summary>
    ///  当天已经购买历练次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyTrialCount {
      get { return buyTrialCount_; }
      set {
        buyTrialCount_ = value;
      }
    }

    /// <summary>Field number for the "buyPowerCount" field.</summary>
    public const int BuyPowerCountFieldNumber = 58;
    private uint buyPowerCount_;
    /// <summary>
    ///  当天已经购买能量次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyPowerCount {
      get { return buyPowerCount_; }
      set {
        buyPowerCount_ = value;
      }
    }

    /// <summary>Field number for the "eliteCount" field.</summary>
    public const int EliteCountFieldNumber = 59;
    private uint eliteCount_;
    /// <summary>
    ///  当天已经打的精英副本次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EliteCount {
      get { return eliteCount_; }
      set {
        eliteCount_ = value;
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 60;
    private global::Proto.Message.AccountType accountType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Message.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "staminaIds" field.</summary>
    public const int StaminaIdsFieldNumber = 63;
    private string staminaIds_ = "";
    /// <summary>
    ///  赠送体力的角色ID，最多10个， 例如：1;2;3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StaminaIds {
      get { return staminaIds_; }
      set {
        staminaIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "storageSlots" field.</summary>
    public const int StorageSlotsFieldNumber = 65;
    private uint storageSlots_;
    /// <summary>
    ///  背包格子总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StorageSlots {
      get { return storageSlots_; }
      set {
        storageSlots_ = value;
      }
    }

    /// <summary>Field number for the "serverZoneId" field.</summary>
    public const int ServerZoneIdFieldNumber = 100;
    private string serverZoneId_ = "";
    /// <summary>
    ///  服务器大区ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerZoneId {
      get { return serverZoneId_; }
      set {
        serverZoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (UserName != other.UserName) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      if (Point != other.Point) return false;
      if (Power != other.Power) return false;
      if (Exp != other.Exp) return false;
      if (Level != other.Level) return false;
      if (Avatar != other.Avatar) return false;
      if (NextLevelExp != other.NextLevelExp) return false;
      if (SkillPoint != other.SkillPoint) return false;
      if(!playerItems_.Equals(other.playerItems_)) return false;
      if(!playerGarages_.Equals(other.playerGarages_)) return false;
      if (SysCharacterId != other.SysCharacterId) return false;
      if (LastLoginTime != other.LastLoginTime) return false;
      if (Flag != other.Flag) return false;
      if (BattleFire != other.BattleFire) return false;
      if (NewbieProgress != other.NewbieProgress) return false;
      if (HaveNewMail != other.HaveNewMail) return false;
      if (QuestScore != other.QuestScore) return false;
      if (NextPvpTime != other.NextPvpTime) return false;
      if (LastPvpTime != other.LastPvpTime) return false;
      if (ReviveCount != other.ReviveCount) return false;
      if (ActivateTime != other.ActivateTime) return false;
      if (ArmorSuitLevel != other.ArmorSuitLevel) return false;
      if (Stamina != other.Stamina) return false;
      if (VipLevel != other.VipLevel) return false;
      if (BuyStaminaCount != other.BuyStaminaCount) return false;
      if (BuyGoldCount != other.BuyGoldCount) return false;
      if (RefreshShopCount != other.RefreshShopCount) return false;
      if (BuyTrialCount != other.BuyTrialCount) return false;
      if (BuyPowerCount != other.BuyPowerCount) return false;
      if (EliteCount != other.EliteCount) return false;
      if (AccountType != other.AccountType) return false;
      if (StaminaIds != other.StaminaIds) return false;
      if (StorageSlots != other.StorageSlots) return false;
      if (ServerZoneId != other.ServerZoneId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (NextLevelExp != 0) hash ^= NextLevelExp.GetHashCode();
      if (SkillPoint != 0) hash ^= SkillPoint.GetHashCode();
      hash ^= playerItems_.GetHashCode();
      hash ^= playerGarages_.GetHashCode();
      if (SysCharacterId != 0) hash ^= SysCharacterId.GetHashCode();
      if (LastLoginTime.Length != 0) hash ^= LastLoginTime.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (BattleFire != 0F) hash ^= BattleFire.GetHashCode();
      if (NewbieProgress != 0) hash ^= NewbieProgress.GetHashCode();
      if (HaveNewMail != false) hash ^= HaveNewMail.GetHashCode();
      if (QuestScore != 0) hash ^= QuestScore.GetHashCode();
      if (NextPvpTime.Length != 0) hash ^= NextPvpTime.GetHashCode();
      if (LastPvpTime.Length != 0) hash ^= LastPvpTime.GetHashCode();
      if (ReviveCount != 0) hash ^= ReviveCount.GetHashCode();
      if (ActivateTime.Length != 0) hash ^= ActivateTime.GetHashCode();
      if (ArmorSuitLevel != 0) hash ^= ArmorSuitLevel.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (BuyStaminaCount != 0) hash ^= BuyStaminaCount.GetHashCode();
      if (BuyGoldCount != 0) hash ^= BuyGoldCount.GetHashCode();
      if (RefreshShopCount != 0) hash ^= RefreshShopCount.GetHashCode();
      if (BuyTrialCount != 0) hash ^= BuyTrialCount.GetHashCode();
      if (BuyPowerCount != 0) hash ^= BuyPowerCount.GetHashCode();
      if (EliteCount != 0) hash ^= EliteCount.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (StaminaIds.Length != 0) hash ^= StaminaIds.GetHashCode();
      if (StorageSlots != 0) hash ^= StorageSlots.GetHashCode();
      if (ServerZoneId.Length != 0) hash ^= ServerZoneId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Diamond);
      }
      if (Point != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Point);
      }
      if (Power != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Power);
      }
      if (Exp != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Level);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Avatar);
      }
      if (NextLevelExp != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(NextLevelExp);
      }
      if (SkillPoint != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SkillPoint);
      }
      playerItems_.WriteTo(output, _repeated_playerItems_codec);
      playerGarages_.WriteTo(output, _repeated_playerGarages_codec);
      if (SysCharacterId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(SysCharacterId);
      }
      if (LastLoginTime.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(LastLoginTime);
      }
      if (Flag != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(Flag);
      }
      if (BattleFire != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(BattleFire);
      }
      if (NewbieProgress != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(NewbieProgress);
      }
      if (HaveNewMail != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(HaveNewMail);
      }
      if (QuestScore != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(QuestScore);
      }
      if (NextPvpTime.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(NextPvpTime);
      }
      if (LastPvpTime.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(LastPvpTime);
      }
      if (ReviveCount != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(ReviveCount);
      }
      if (ActivateTime.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(ActivateTime);
      }
      if (ArmorSuitLevel != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(ArmorSuitLevel);
      }
      if (Stamina != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(Stamina);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(VipLevel);
      }
      if (BuyStaminaCount != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(BuyStaminaCount);
      }
      if (BuyGoldCount != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(BuyGoldCount);
      }
      if (RefreshShopCount != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(RefreshShopCount);
      }
      if (BuyTrialCount != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(BuyTrialCount);
      }
      if (BuyPowerCount != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(BuyPowerCount);
      }
      if (EliteCount != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(EliteCount);
      }
      if (AccountType != 0) {
        output.WriteRawTag(224, 3);
        output.WriteEnum((int) AccountType);
      }
      if (StaminaIds.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(StaminaIds);
      }
      if (StorageSlots != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(StorageSlots);
      }
      if (ServerZoneId.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(ServerZoneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Diamond);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Point);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (NextLevelExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextLevelExp);
      }
      if (SkillPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillPoint);
      }
      size += playerItems_.CalculateSize(_repeated_playerItems_codec);
      size += playerGarages_.CalculateSize(_repeated_playerGarages_codec);
      if (SysCharacterId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SysCharacterId);
      }
      if (LastLoginTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastLoginTime);
      }
      if (Flag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      if (BattleFire != 0F) {
        size += 2 + 4;
      }
      if (NewbieProgress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NewbieProgress);
      }
      if (HaveNewMail != false) {
        size += 2 + 1;
      }
      if (QuestScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(QuestScore);
      }
      if (NextPvpTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NextPvpTime);
      }
      if (LastPvpTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastPvpTime);
      }
      if (ReviveCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviveCount);
      }
      if (ActivateTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActivateTime);
      }
      if (ArmorSuitLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArmorSuitLevel);
      }
      if (Stamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Stamina);
      }
      if (VipLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VipLevel);
      }
      if (BuyStaminaCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuyStaminaCount);
      }
      if (BuyGoldCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuyGoldCount);
      }
      if (RefreshShopCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RefreshShopCount);
      }
      if (BuyTrialCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuyTrialCount);
      }
      if (BuyPowerCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuyPowerCount);
      }
      if (EliteCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EliteCount);
      }
      if (AccountType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (StaminaIds.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StaminaIds);
      }
      if (StorageSlots != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StorageSlots);
      }
      if (ServerZoneId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ServerZoneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.NextLevelExp != 0) {
        NextLevelExp = other.NextLevelExp;
      }
      if (other.SkillPoint != 0) {
        SkillPoint = other.SkillPoint;
      }
      playerItems_.Add(other.playerItems_);
      playerGarages_.Add(other.playerGarages_);
      if (other.SysCharacterId != 0) {
        SysCharacterId = other.SysCharacterId;
      }
      if (other.LastLoginTime.Length != 0) {
        LastLoginTime = other.LastLoginTime;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.BattleFire != 0F) {
        BattleFire = other.BattleFire;
      }
      if (other.NewbieProgress != 0) {
        NewbieProgress = other.NewbieProgress;
      }
      if (other.HaveNewMail != false) {
        HaveNewMail = other.HaveNewMail;
      }
      if (other.QuestScore != 0) {
        QuestScore = other.QuestScore;
      }
      if (other.NextPvpTime.Length != 0) {
        NextPvpTime = other.NextPvpTime;
      }
      if (other.LastPvpTime.Length != 0) {
        LastPvpTime = other.LastPvpTime;
      }
      if (other.ReviveCount != 0) {
        ReviveCount = other.ReviveCount;
      }
      if (other.ActivateTime.Length != 0) {
        ActivateTime = other.ActivateTime;
      }
      if (other.ArmorSuitLevel != 0) {
        ArmorSuitLevel = other.ArmorSuitLevel;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.BuyStaminaCount != 0) {
        BuyStaminaCount = other.BuyStaminaCount;
      }
      if (other.BuyGoldCount != 0) {
        BuyGoldCount = other.BuyGoldCount;
      }
      if (other.RefreshShopCount != 0) {
        RefreshShopCount = other.RefreshShopCount;
      }
      if (other.BuyTrialCount != 0) {
        BuyTrialCount = other.BuyTrialCount;
      }
      if (other.BuyPowerCount != 0) {
        BuyPowerCount = other.BuyPowerCount;
      }
      if (other.EliteCount != 0) {
        EliteCount = other.EliteCount;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.StaminaIds.Length != 0) {
        StaminaIds = other.StaminaIds;
      }
      if (other.StorageSlots != 0) {
        StorageSlots = other.StorageSlots;
      }
      if (other.ServerZoneId.Length != 0) {
        ServerZoneId = other.ServerZoneId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 32: {
            Gold = input.ReadUInt32();
            break;
          }
          case 40: {
            Diamond = input.ReadUInt32();
            break;
          }
          case 48: {
            Point = input.ReadUInt32();
            break;
          }
          case 64: {
            Power = input.ReadUInt32();
            break;
          }
          case 72: {
            Exp = input.ReadUInt32();
            break;
          }
          case 80: {
            Level = input.ReadUInt32();
            break;
          }
          case 98: {
            Avatar = input.ReadString();
            break;
          }
          case 104: {
            NextLevelExp = input.ReadUInt32();
            break;
          }
          case 112: {
            SkillPoint = input.ReadUInt32();
            break;
          }
          case 122: {
            playerItems_.AddEntriesFrom(input, _repeated_playerItems_codec);
            break;
          }
          case 130: {
            playerGarages_.AddEntriesFrom(input, _repeated_playerGarages_codec);
            break;
          }
          case 136: {
            SysCharacterId = input.ReadUInt32();
            break;
          }
          case 210: {
            LastLoginTime = input.ReadString();
            break;
          }
          case 248: {
            Flag = input.ReadUInt32();
            break;
          }
          case 261: {
            BattleFire = input.ReadFloat();
            break;
          }
          case 296: {
            NewbieProgress = input.ReadUInt32();
            break;
          }
          case 312: {
            HaveNewMail = input.ReadBool();
            break;
          }
          case 320: {
            QuestScore = input.ReadUInt32();
            break;
          }
          case 330: {
            NextPvpTime = input.ReadString();
            break;
          }
          case 338: {
            LastPvpTime = input.ReadString();
            break;
          }
          case 344: {
            ReviveCount = input.ReadUInt32();
            break;
          }
          case 362: {
            ActivateTime = input.ReadString();
            break;
          }
          case 392: {
            ArmorSuitLevel = input.ReadUInt32();
            break;
          }
          case 400: {
            Stamina = input.ReadUInt32();
            break;
          }
          case 416: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 432: {
            BuyStaminaCount = input.ReadUInt32();
            break;
          }
          case 440: {
            BuyGoldCount = input.ReadUInt32();
            break;
          }
          case 448: {
            RefreshShopCount = input.ReadUInt32();
            break;
          }
          case 456: {
            BuyTrialCount = input.ReadUInt32();
            break;
          }
          case 464: {
            BuyPowerCount = input.ReadUInt32();
            break;
          }
          case 472: {
            EliteCount = input.ReadUInt32();
            break;
          }
          case 480: {
            accountType_ = (global::Proto.Message.AccountType) input.ReadEnum();
            break;
          }
          case 506: {
            StaminaIds = input.ReadString();
            break;
          }
          case 520: {
            StorageSlots = input.ReadUInt32();
            break;
          }
          case 802: {
            ServerZoneId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
