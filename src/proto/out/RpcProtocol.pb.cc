// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RpcProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Proto {
namespace Protocol {

void protobuf_ShutdownFile_RpcProtocol_2eproto() {
  delete Header::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RpcProtocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RpcProtocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_RpcProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Header::default_instance_ = new Header();
  Header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RpcProtocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RpcProtocol_2eproto_once_);
void protobuf_AddDesc_RpcProtocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RpcProtocol_2eproto_once_,
                 &protobuf_AddDesc_RpcProtocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RpcProtocol_2eproto {
  StaticDescriptorInitializer_RpcProtocol_2eproto() {
    protobuf_AddDesc_RpcProtocol_2eproto();
  }
} static_descriptor_initializer_RpcProtocol_2eproto_;
#endif
bool PacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool BattlePacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool RpcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTypeFieldNumber;
const int Header::kMethodNameFieldNumber;
const int Header::kUidFieldNumber;
const int Header::kPidFieldNumber;
const int Header::kCodeFieldNumber;
const int Header::kRpcIdFieldNumber;
const int Header::kPacketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Protocol.Header)
}

void Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Header::Header(const Header& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.Protocol.Header)
}

void Header::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  methodname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  code_ = 0;
  rpcid_ = 0u;
  packetid_ = 0u;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Proto.Protocol.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  methodname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Header& Header::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RpcProtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RpcProtocol_2eproto();
#endif
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Protocol.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, packetid_);
  methodname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Protocol.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.Protocol.PacketType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Proto::Protocol::PacketType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_methodName;
        break;
      }

      // optional string methodName = 2;
      case 2: {
        if (tag == 18) {
         parse_methodName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_methodname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->methodname().data(), this->methodname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Proto.Protocol.Header.methodName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional sint64 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional sint64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &pid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_code;
        break;
      }

      // optional sint32 code = 6;
      case 6: {
        if (tag == 48) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rpcId;
        break;
      }

      // optional uint32 rpcId = 7;
      case 7: {
        if (tag == 56) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpcid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_packetId;
        break;
      }

      // optional uint32 packetId = 8;
      case 8: {
        if (tag == 64) {
         parse_packetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packetid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Protocol.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Protocol.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Protocol.Header)
  // optional .Proto.Protocol.PacketType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string methodName = 2;
  if (this->methodname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->methodname().data(), this->methodname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.Protocol.Header.methodName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->methodname(), output);
  }

  // optional sint64 uid = 4;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->uid(), output);
  }

  // optional sint64 pid = 5;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->pid(), output);
  }

  // optional sint32 code = 6;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->code(), output);
  }

  // optional uint32 rpcId = 7;
  if (this->rpcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rpcid(), output);
  }

  // optional uint32 packetId = 8;
  if (this->packetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->packetid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.Protocol.Header)
}

int Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Protocol.Header)
  int total_size = 0;

  // optional .Proto.Protocol.PacketType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string methodName = 2;
  if (this->methodname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->methodname());
  }

  // optional sint64 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->uid());
  }

  // optional sint64 pid = 5;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->pid());
  }

  // optional sint32 code = 6;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->code());
  }

  // optional uint32 rpcId = 7;
  if (this->rpcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rpcid());
  }

  // optional uint32 packetId = 8;
  if (this->packetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packetid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Header*>(&from));
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Protocol.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.methodname().size() > 0) {

    methodname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.methodname_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.rpcid() != 0) {
    set_rpcid(from.rpcid());
  }
  if (from.packetid() != 0) {
    set_packetid(from.packetid());
  }
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Protocol.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(type_, other->type_);
  methodname_.Swap(&other->methodname_);
  std::swap(uid_, other->uid_);
  std::swap(pid_, other->pid_);
  std::swap(code_, other->code_);
  std::swap(rpcid_, other->rpcid_);
  std::swap(packetid_, other->packetid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Header::GetTypeName() const {
  return "Proto.Protocol.Header";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional .Proto.Protocol.PacketType type = 1;
void Header::clear_type() {
  type_ = 0;
}
 ::Proto::Protocol::PacketType Header::type() const {
  // @@protoc_insertion_point(field_get:Proto.Protocol.Header.type)
  return static_cast< ::Proto::Protocol::PacketType >(type_);
}
 void Header::set_type(::Proto::Protocol::PacketType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.Protocol.Header.type)
}

// optional string methodName = 2;
void Header::clear_methodname() {
  methodname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Header::methodname() const {
  // @@protoc_insertion_point(field_get:Proto.Protocol.Header.methodName)
  return methodname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_methodname(const ::std::string& value) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Protocol.Header.methodName)
}
 void Header::set_methodname(const char* value) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Protocol.Header.methodName)
}
 void Header::set_methodname(const char* value, size_t size) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Protocol.Header.methodName)
}
 ::std::string* Header::mutable_methodname() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Protocol.Header.methodName)
  return methodname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_methodname() {
  // @@protoc_insertion_point(field_release:Proto.Protocol.Header.methodName)
  
  return methodname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_methodname(::std::string* methodname) {
  if (methodname != NULL) {
    
  } else {
    
  }
  methodname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodname);
  // @@protoc_insertion_point(field_set_allocated:Proto.Protocol.Header.methodName)
}

// optional sint64 uid = 4;
void Header::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Header::uid() const {
  // @@protoc_insertion_point(field_get:Proto.Protocol.Header.uid)
  return uid_;
}
 void Header::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Proto.Protocol.Header.uid)
}

// optional sint64 pid = 5;
void Header::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Header::pid() const {
  // @@protoc_insertion_point(field_get:Proto.Protocol.Header.pid)
  return pid_;
}
 void Header::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:Proto.Protocol.Header.pid)
}

// optional sint32 code = 6;
void Header::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 Header::code() const {
  // @@protoc_insertion_point(field_get:Proto.Protocol.Header.code)
  return code_;
}
 void Header::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Proto.Protocol.Header.code)
}

// optional uint32 rpcId = 7;
void Header::clear_rpcid() {
  rpcid_ = 0u;
}
 ::google::protobuf::uint32 Header::rpcid() const {
  // @@protoc_insertion_point(field_get:Proto.Protocol.Header.rpcId)
  return rpcid_;
}
 void Header::set_rpcid(::google::protobuf::uint32 value) {
  
  rpcid_ = value;
  // @@protoc_insertion_point(field_set:Proto.Protocol.Header.rpcId)
}

// optional uint32 packetId = 8;
void Header::clear_packetid() {
  packetid_ = 0u;
}
 ::google::protobuf::uint32 Header::packetid() const {
  // @@protoc_insertion_point(field_get:Proto.Protocol.Header.packetId)
  return packetid_;
}
 void Header::set_packetid(::google::protobuf::uint32 value) {
  
  packetid_ = value;
  // @@protoc_insertion_point(field_set:Proto.Protocol.Header.packetId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace Proto

// @@protoc_insertion_point(global_scope)
